// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id        String    @id @default(uuid()) @db.Char(36)
  first_name     String
  last_name      String?
  email_address  String    @unique
  role           Role
  phone_number   String
  profession     String?
  gender         Gender?
  knowing_from   String?
  remember_token String?
  deleted_at     DateTime? @db.Timestamp(6)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
}

model Account {
  id                Int     @id @default(autoincrement())
  user_id           String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  user_id      String
  expires      DateTime

  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  admin
  member
}

enum Gender {
  Laki_Laki
  Perempuan
}
